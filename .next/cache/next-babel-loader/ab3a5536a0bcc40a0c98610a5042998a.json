{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Volumes/Macintosh HD (Wipro)/Users/aris/projects/anticorona/anticorona/src/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query getStoreByName($name: String!){\\n    store\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Component } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport Layout from '../components/Layout';\nimport Stores from '../components/Stores/Stores';\nimport { withApollo } from '../lib/apollo';\nimport gql from 'graphql-tag';\nvar ALL_STORES_QUERY = gql(_templateObject());\nexport var allStoresQueryVars = {\n  name: 'Tesco'\n};\n\nvar _useQuery = useQuery(ALL_STORES_QUERY, {\n  variables: allStoresQueryVars,\n  // Setting this value to true will make the component rerender when\n  // the \"networkStatus\" changes, so we are able to know if it is fetching\n  // more data\n  notifyOnNetworkStatusChange: true\n}),\n    loading = _useQuery.loading,\n    error = _useQuery.error,\n    data = _useQuery.data,\n    fetchMore = _useQuery.fetchMore,\n    networkStatus = _useQuery.networkStatus;\n\nvar Index =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Index, _Component);\n\n  function Index() {\n    _classCallCheck(this, Index);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Index).apply(this, arguments));\n  }\n\n  _createClass(Index, [{\n    key: \"render\",\n    value: function render() {\n      var stores = this.props.stores;\n      return __jsx(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, __jsx(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"Stores\"));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps() {\n      var _useQuery2, data, loading;\n\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _useQuery2 = useQuery(ViewerQuery), data = _useQuery2.data, loading = _useQuery2.loading;\n              console.log(data);\n              return _context.abrupt(\"return\", {});\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return Index;\n}(Component);\n\nexport default withApollo(Index);","map":{"version":3,"sources":["/Volumes/Macintosh HD (Wipro)/Users/aris/projects/anticorona/anticorona/src/pages/index.js"],"names":["Component","fetch","Layout","Stores","withApollo","gql","ALL_STORES_QUERY","allStoresQueryVars","name","useQuery","variables","notifyOnNetworkStatusChange","loading","error","data","fetchMore","networkStatus","Index","stores","props","ViewerQuery","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,IAAMC,gBAAgB,GAAGD,GAAH,mBAAtB;AAMA,OAAO,IAAME,kBAAkB,GAAG;AAC9BC,EAAAA,IAAI,EAAE;AADwB,CAA3B;;gBAIoDC,QAAQ,CAC/DH,gBAD+D,EAE/D;AACEI,EAAAA,SAAS,EAAEH,kBADb;AAEE;AACA;AACA;AACAI,EAAAA,2BAA2B,EAAE;AAL/B,CAF+D,C;IAA3DC,O,aAAAA,O;IAASC,K,aAAAA,K;IAAOC,I,aAAAA,I;IAAMC,S,aAAAA,S;IAAWC,a,aAAAA,a;;IAWnCC,K;;;;;;;;;;;;;6BAWO;AAAA,UACEC,MADF,GACY,KAAKC,KADjB,CACED,MADF;AAEL,aACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,CADJ;AAQC;;;;;;;;;;2BAjByBT,QAAQ,CAACW,WAAD,C,EAA1BN,I,cAAAA,I,EAAMF,O,cAAAA,O;AAEdS,cAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;+CAEO,E;;;;;;;;;;;;EARKd,S;;AAwBpB,eAAeI,UAAU,CAACa,KAAD,CAAzB","sourcesContent":["import { Component } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport Layout from '../components/Layout';\nimport Stores from '../components/Stores/Stores';\nimport { withApollo } from '../lib/apollo';\nimport gql from 'graphql-tag'\n\nconst ALL_STORES_QUERY = gql`\n  query getStoreByName($name: String!){\n    store\n  }\n`\n\nexport const allStoresQueryVars = {\n    name: 'Tesco'\n}\n\nconst { loading, error, data, fetchMore, networkStatus } = useQuery(\n    ALL_STORES_QUERY,\n    {\n      variables: allStoresQueryVars,\n      // Setting this value to true will make the component rerender when\n      // the \"networkStatus\" changes, so we are able to know if it is fetching\n      // more data\n      notifyOnNetworkStatusChange: true,\n    }\n)\n\nclass Index extends Component {\n\n    \n    static async getInitialProps() {\n        const { data, loading } = useQuery(ViewerQuery)\n\n        console.log(data);\n      \n        return {};\n    }\n\n    render() {\n        const {stores} = this.props;\n        return (\n            <Layout>\n                <h1>Stores</h1>\n                {/* {stores.map(s=> <Stores key={s.id} {...s} />)}\n                 */}\n            </Layout>\n        )\n            \n        }\n}\n\nexport default withApollo(Index)"]},"metadata":{},"sourceType":"module"}