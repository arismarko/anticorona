{"ast":null,"code":"import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport fetch from 'isomorphic-unfetch';\nexport default function createApolloClient(initialState, ctx) {\n  // The `ctx` (NextPageContext) will only be present on the server.\n  // use it to extract auth headers (ctx.req) or similar.\n  const errorLink = onError(({\n    graphQLErrors\n  }) => {\n    if (graphQLErrors) graphQLErrors.map(({\n      message\n    }) => console.log(message));\n  });\n  return new ApolloClient({\n    ssrMode: Boolean(ctx),\n    link: new HttpLink({\n      uri: 'http://localhost:3000/',\n      // Server URL (must be absolute)\n      credentials: 'same-origin',\n      // Additional fetch() options like `credentials` or `headers`\n      fetch\n    }),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["/Volumes/Macintosh HD (Wipro)/Users/aris/projects/anticorona/anticorona/src/apolloClient.js"],"names":["ApolloClient","InMemoryCache","HttpLink","fetch","createApolloClient","initialState","ctx","errorLink","onError","graphQLErrors","map","message","console","log","ssrMode","Boolean","link","uri","credentials","cache","restore"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,eAAe,SAASC,kBAAT,CAA4BC,YAA5B,EAA0CC,GAA1C,EAA+C;AAC5D;AACA;AAEA,QAAMC,SAAS,GAAGC,OAAO,CAAC,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAuB;AAC/C,QAAIA,aAAJ,EAAmBA,aAAa,CAACC,GAAd,CAAkB,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAiBC,OAAO,CAACC,GAAR,CAAYF,OAAZ,CAAnC;AACpB,GAFwB,CAAzB;AAIA,SAAO,IAAIX,YAAJ,CAAiB;AACtBc,IAAAA,OAAO,EAAEC,OAAO,CAACT,GAAD,CADM;AAEtBU,IAAAA,IAAI,EAAE,IAAId,QAAJ,CAAa;AACjBe,MAAAA,GAAG,EAAE,wBADY;AACc;AAC/BC,MAAAA,WAAW,EAAE,aAFI;AAEW;AAC5Bf,MAAAA;AAHiB,KAAb,CAFgB;AAOtBgB,IAAAA,KAAK,EAAE,IAAIlB,aAAJ,GAAoBmB,OAApB,CAA4Bf,YAA5B;AAPe,GAAjB,CAAP;AASD","sourcesContent":["import { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { HttpLink } from 'apollo-link-http'\nimport fetch from 'isomorphic-unfetch'\n\nexport default function createApolloClient(initialState, ctx) {\n  // The `ctx` (NextPageContext) will only be present on the server.\n  // use it to extract auth headers (ctx.req) or similar.\n\n  const errorLink = onError(({ graphQLErrors }) => {\n    if (graphQLErrors) graphQLErrors.map(({ message }) => console.log(message))\n  })\n\n  return new ApolloClient({\n    ssrMode: Boolean(ctx),\n    link: new HttpLink({\n      uri: 'http://localhost:3000/', // Server URL (must be absolute)\n      credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\n      fetch,\n    }),\n    cache: new InMemoryCache().restore(initialState),\n  })\n}"]},"metadata":{},"sourceType":"module"}