{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Volumes/Macintosh HD (Wipro)/Users/aris/projects/anticorona/anticorona/src/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query getAllStores {\\n    store\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Layout from '../components/Layout';\nimport fetch from 'isomorphic-unfetch';\nimport Stores from '../components/Stores/Stores';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { withApollo } from '../lib/apollo';\nvar ALL_STORES_QUERY = gql(_templateObject());\nexport var allStoresQueryVars = {\n  name: 'tesco1'\n};\n\nvar Index = function Index(props) {\n  var _useQuery = useQuery(ALL_STORES_QUERY, {\n    variables: allStoresQueryVars,\n    // Setting this value to true will make the component rerender when\n    // the \"networkStatus\" changes, so we are able to know if it is fetching\n    // more data\n    notifyOnNetworkStatusChange: true\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus;\n\n  console.log(\"hello\");\n  console.log(data);\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \" Welcome to my workshop\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, __jsx(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    href: \"/about\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"About\"), data)));\n};\n\nexport default withApollo()(Index);","map":{"version":3,"sources":["/Volumes/Macintosh HD (Wipro)/Users/aris/projects/anticorona/anticorona/src/pages/index.js"],"names":["Layout","fetch","Stores","useQuery","gql","withApollo","ALL_STORES_QUERY","allStoresQueryVars","name","Index","props","variables","notifyOnNetworkStatusChange","loading","error","data","fetchMore","networkStatus","console","log"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,UAAT,QAA2B,eAA3B;AAEA,IAAMC,gBAAgB,GAAGF,GAAH,mBAAtB;AAMA,OAAO,IAAMG,kBAAkB,GAAG;AAC9BC,EAAAA,IAAI,EAAE;AADwB,CAA3B;;AAKP,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAUC,KAAV,EAAkB;AAAA,kBAC6BP,QAAQ,CACjEG,gBADiE,EAEjE;AACEK,IAAAA,SAAS,EAAEJ,kBADb;AAEE;AACA;AACA;AACAK,IAAAA,2BAA2B,EAAE;AAL/B,GAFiE,CADrC;AAAA,MACtBC,OADsB,aACtBA,OADsB;AAAA,MACbC,KADa,aACbA,KADa;AAAA,MACNC,IADM,aACNA,IADM;AAAA,MACAC,SADA,aACAA,SADA;AAAA,MACWC,aADX,aACWA,aADX;;AAY9BC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AAEA,SAEE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAG,IAAA,IAAI,EAAC,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,EAEKA,IAFL,CADJ,CAFJ,CAFF;AAYD,CA3BD;;AA6BA,eAAeV,UAAU,GAAGI,KAAH,CAAzB","sourcesContent":["import Layout from '../components/Layout';\nimport fetch from 'isomorphic-unfetch';\nimport Stores from '../components/Stores/Stores';\nimport { useQuery } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\nimport { withApollo } from '../lib/apollo'\n\nconst ALL_STORES_QUERY = gql`\n  query getAllStores {\n    store\n  }\n`\n\nexport const allStoresQueryVars = {\n    name: 'tesco1'\n}\n\n\nconst Index = function (props)  {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    ALL_STORES_QUERY,\n    {\n      variables: allStoresQueryVars,\n      // Setting this value to true will make the component rerender when\n      // the \"networkStatus\" changes, so we are able to know if it is fetching\n      // more data\n      notifyOnNetworkStatusChange: true,\n    }\n  )\n\n  console.log(\"hello\");\n  console.log(data);\n\n  return (\n    \n    <Layout>\n        <h1> Welcome to my workshop</h1>\n        <ul>\n            <li>\n                <a href=\"/about\">About</a>\n                {data}\n            </li>\n        </ul>\n    </Layout>\n  )\n}\n\nexport default withApollo()(Index)"]},"metadata":{},"sourceType":"module"}