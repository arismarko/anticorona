{"ast":null,"code":"var _jsxFileName = \"/Volumes/Macintosh HD (Wipro)/Users/aris/projects/anticorona/anticorona/src/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport Layout from '../components/Layout';\nimport Stores from '../components/Stores/Stores';\nimport { withApollo } from '../lib/apollo';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nconst ALL_STORES_QUERY = gql`\n  query getStoreByName($name: String!){\n    store\n  }\n`;\nexport const allStoresQueryVars = {\n  name: 'tesco1'\n};\n\nclass Index extends Component {\n  static async getInitialProps() {\n    const {\n      loading,\n      error,\n      data,\n      fetchMore,\n      networkStatus\n    } = useQuery(ALL_STORES_QUERY, {\n      variables: allStoresQueryVars,\n      // Setting this value to true will make the component rerender when\n      // the \"networkStatus\" changes, so we are able to know if it is fetching\n      // more data\n      notifyOnNetworkStatusChange: true\n    });\n    console.log(data);\n    return {};\n  }\n\n  render() {\n    const {\n      stores\n    } = this.props;\n    return __jsx(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"Stores\"));\n  }\n\n}\n\nexport default withApollo(Index);","map":{"version":3,"sources":["/Volumes/Macintosh HD (Wipro)/Users/aris/projects/anticorona/anticorona/src/pages/index.js"],"names":["Component","fetch","Layout","Stores","withApollo","useQuery","gql","ALL_STORES_QUERY","allStoresQueryVars","name","Index","getInitialProps","loading","error","data","fetchMore","networkStatus","variables","notifyOnNetworkStatusChange","console","log","render","stores","props"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,MAAMC,gBAAgB,GAAGD,GAAI;;;;CAA7B;AAMA,OAAO,MAAME,kBAAkB,GAAG;AAC9BC,EAAAA,IAAI,EAAE;AADwB,CAA3B;;AAIP,MAAMC,KAAN,SAAoBV,SAApB,CAA8B;AAE1B,eAAaW,eAAb,GAA+B;AAC3B,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,KAAX;AAAkBC,MAAAA,IAAlB;AAAwBC,MAAAA,SAAxB;AAAmCC,MAAAA;AAAnC,QAAqDX,QAAQ,CAC/DE,gBAD+D,EAE/D;AACEU,MAAAA,SAAS,EAAET,kBADb;AAEE;AACA;AACA;AACAU,MAAAA,2BAA2B,EAAE;AAL/B,KAF+D,CAAnE;AAWAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AAEA,WAAO,EAAP;AACH;;AAEDO,EAAAA,MAAM,GAAG;AACL,UAAM;AAACC,MAAAA;AAAD,QAAW,KAAKC,KAAtB;AACA,WACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,CADJ;AAQC;;AA7BqB;;AAgC9B,eAAenB,UAAU,CAACM,KAAD,CAAzB","sourcesContent":["import { Component } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport Layout from '../components/Layout';\nimport Stores from '../components/Stores/Stores';\nimport { withApollo } from '../lib/apollo';\nimport { useQuery } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\n\nconst ALL_STORES_QUERY = gql`\n  query getStoreByName($name: String!){\n    store\n  }\n`\n\nexport const allStoresQueryVars = {\n    name: 'tesco1'\n}\n\nclass Index extends Component {\n    \n    static async getInitialProps() {\n        const { loading, error, data, fetchMore, networkStatus } = useQuery(\n            ALL_STORES_QUERY,\n            {\n              variables: allStoresQueryVars,\n              // Setting this value to true will make the component rerender when\n              // the \"networkStatus\" changes, so we are able to know if it is fetching\n              // more data\n              notifyOnNetworkStatusChange: true,\n            }\n        )        \n\n        console.log(data);\n      \n        return {};\n    }\n\n    render() {\n        const {stores} = this.props;\n        return (\n            <Layout>\n                <h1>Stores</h1>\n                {/* {stores.map(s=> <Stores key={s.id} {...s} />)}\n                 */}\n            </Layout>\n        )\n            \n        }\n}\n\nexport default withApollo(Index)"]},"metadata":{},"sourceType":"module"}