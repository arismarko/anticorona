{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Volumes/Macintosh HD (Wipro)/Users/aris/projects/anticorona/anticorona/src/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query getStoreByName($name: String!){\\n    store\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Layout from '../components/Layout';\nimport fetch from 'isomorphic-unfetch';\nimport Stores from '../components/Stores/Stores';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nvar ALL_STORES_QUERY = gql(_templateObject());\nexport var allStoresQueryVars = {\n  name: 'tesco1'\n};\n\nvar Index = function Index(_ref) {\n  var data = _ref.data;\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \" Welcome to my workshop\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, __jsx(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    href: \"/about\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"About\"), data)));\n};\n\nIndex.getInitialProps = function _callee() {\n  var _useQuery, loading, error, data, fetchMore, networkStatus;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _useQuery = useQuery(ALL_STORES_QUERY, {\n            variables: allStoresQueryVars,\n            // Setting this value to true will make the component rerender when\n            // the \"networkStatus\" changes, so we are able to know if it is fetching\n            // more data\n            notifyOnNetworkStatusChange: true\n          }), loading = _useQuery.loading, error = _useQuery.error, data = _useQuery.data, fetchMore = _useQuery.fetchMore, networkStatus = _useQuery.networkStatus;\n          return _context.abrupt(\"return\", {\n            data: data\n          });\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Index;","map":{"version":3,"sources":["/Volumes/Macintosh HD (Wipro)/Users/aris/projects/anticorona/anticorona/src/pages/index.js"],"names":["Layout","fetch","Stores","useQuery","gql","ALL_STORES_QUERY","allStoresQueryVars","name","Index","data","getInitialProps","variables","notifyOnNetworkStatusChange","loading","error","fetchMore","networkStatus"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,IAAMC,gBAAgB,GAAGD,GAAH,mBAAtB;AAMA,OAAO,IAAME,kBAAkB,GAAG;AAC9BC,EAAAA,IAAI,EAAE;AADwB,CAA3B;;AAMP,IAAMC,KAAK,GAAG,SAARA,KAAQ;AAAA,MAAEC,IAAF,QAAEA,IAAF;AAAA,SAEV,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAG,IAAA,IAAI,EAAC,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,EAEKA,IAFL,CADJ,CAFJ,CAFU;AAAA,CAAd;;AAaAD,KAAK,CAACE,eAAN,GAAwB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBACuCP,QAAQ,CAC/DE,gBAD+D,EAE/D;AACEM,YAAAA,SAAS,EAAEL,kBADb;AAEE;AACA;AACA;AACAM,YAAAA,2BAA2B,EAAE;AAL/B,WAF+D,CAD/C,EACZC,OADY,aACZA,OADY,EACHC,KADG,aACHA,KADG,EACIL,IADJ,aACIA,IADJ,EACUM,SADV,aACUA,SADV,EACqBC,aADrB,aACqBA,aADrB;AAAA,2CAYb;AAACP,YAAAA,IAAI,EAAJA;AAAD,WAZa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAeA,eAAeD,KAAf","sourcesContent":["import Layout from '../components/Layout';\nimport fetch from 'isomorphic-unfetch';\nimport Stores from '../components/Stores/Stores';\nimport { useQuery } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\n\nconst ALL_STORES_QUERY = gql`\n  query getStoreByName($name: String!){\n    store\n  }\n`\n\nexport const allStoresQueryVars = {\n    name: 'tesco1'\n}\n\n\n\nconst Index = ({data}) => (\n    \n    <Layout>\n        <h1> Welcome to my workshop</h1>\n        <ul>\n            <li>\n                <a href=\"/about\">About</a>\n                {data}\n            </li>\n        </ul>\n    </Layout>\n)\n\nIndex.getInitialProps = async () => {\n    const { loading, error, data, fetchMore, networkStatus } = useQuery(\n        ALL_STORES_QUERY,\n        {\n          variables: allStoresQueryVars,\n          // Setting this value to true will make the component rerender when\n          // the \"networkStatus\" changes, so we are able to know if it is fetching\n          // more data\n          notifyOnNetworkStatusChange: true,\n        }\n      )\n\n    return {data};\n}\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}