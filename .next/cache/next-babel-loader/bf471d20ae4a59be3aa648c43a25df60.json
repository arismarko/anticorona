{"ast":null,"code":"var _jsxFileName = \"/Volumes/Macintosh HD (Wipro)/Users/aris/projects/anticorona/anticorona/src/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport Layout from '../components/Layout';\nimport Stores from '../components/Stores/Stores';\nimport { withApollo } from '../lib/apollo';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag'; // const ALL_STORES_QUERY = gql`\n//   query getStoreByName($name: String!){\n//     store\n//   }\n// `\n// export const allStoresQueryVars = {\n//     name: 'tesco1'\n// }\n\nclass Index extends Component {\n  static async getInitialProps() {\n    // const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    //     ALL_STORES_QUERY,\n    //     {\n    //       variables: allStoresQueryVars,\n    //       // Setting this value to true will make the component rerender when\n    //       // the \"networkStatus\" changes, so we are able to know if it is fetching\n    //       // more data\n    //       notifyOnNetworkStatusChange: true,\n    //     }\n    // )        \n    return {};\n  }\n\n  render() {\n    const {\n      data\n    } = this.props;\n    return __jsx(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Stores\"));\n  }\n\n}\n\nexport default withApollo(Index);","map":{"version":3,"sources":["/Volumes/Macintosh HD (Wipro)/Users/aris/projects/anticorona/anticorona/src/pages/index.js"],"names":["Component","fetch","Layout","Stores","withApollo","useQuery","gql","Index","getInitialProps","render","data","props"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,MAAMC,KAAN,SAAoBP,SAApB,CAA8B;AAE1B,eAAaQ,eAAb,GAA+B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,WAAO,EAAP;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAACC,MAAAA;AAAD,QAAS,KAAKC,KAApB;AAEA,WACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,CADJ;AAOH;;AA3ByB;;AA8B9B,eAAeP,UAAU,CAACG,KAAD,CAAzB","sourcesContent":["import { Component } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport Layout from '../components/Layout';\nimport Stores from '../components/Stores/Stores';\nimport { withApollo } from '../lib/apollo';\nimport { useQuery } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\n\n// const ALL_STORES_QUERY = gql`\n//   query getStoreByName($name: String!){\n//     store\n//   }\n// `\n\n// export const allStoresQueryVars = {\n//     name: 'tesco1'\n// }\n\nclass Index extends Component {\n    \n    static async getInitialProps() {\n        // const { loading, error, data, fetchMore, networkStatus } = useQuery(\n        //     ALL_STORES_QUERY,\n        //     {\n        //       variables: allStoresQueryVars,\n        //       // Setting this value to true will make the component rerender when\n        //       // the \"networkStatus\" changes, so we are able to know if it is fetching\n        //       // more data\n        //       notifyOnNetworkStatusChange: true,\n        //     }\n        // )        \n\n        return {};\n    }\n\n    render() {\n        const {data} = this.props;\n        \n        return (\n            <Layout>\n                <h1>Stores</h1>\n                {/* {stores.map(s=> <Stores key={s.id} {...s} />)}\n                 */}\n            </Layout>\n        )\n    }\n}\n\nexport default withApollo(Index)"]},"metadata":{},"sourceType":"module"}