{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Volumes/Macintosh HD (Wipro)/Users/aris/projects/anticorona/anticorona/src/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query getStoreByName($name: String!){\\n    store\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Component } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport Layout from '../components/Layout';\nimport Stores from '../components/Stores/Stores';\nimport { withApollo } from '../lib/apollo';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nvar ALL_STORES_QUERY = gql(_templateObject());\nexport var allStoresQueryVars = {\n  name: 'tesco1'\n};\n\nvar Index =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Index, _Component);\n\n  function Index() {\n    _classCallCheck(this, Index);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Index).apply(this, arguments));\n  }\n\n  _createClass(Index, [{\n    key: \"render\",\n    value: function render() {\n      var stores = this.props.stores;\n      return __jsx(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, __jsx(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"Stores\"));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps() {\n      var _useQuery, loading, error, data, fetchMore, networkStatus;\n\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _useQuery = useQuery(ALL_STORES_QUERY, {\n                variables: allStoresQueryVars,\n                // Setting this value to true will make the component rerender when\n                // the \"networkStatus\" changes, so we are able to know if it is fetching\n                // more data\n                notifyOnNetworkStatusChange: true\n              }), loading = _useQuery.loading, error = _useQuery.error, data = _useQuery.data, fetchMore = _useQuery.fetchMore, networkStatus = _useQuery.networkStatus;\n              console.log(data);\n              return _context.abrupt(\"return\", {\n                data: data\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return Index;\n}(Component);\n\nexport default withApollo(Index);","map":{"version":3,"sources":["/Volumes/Macintosh HD (Wipro)/Users/aris/projects/anticorona/anticorona/src/pages/index.js"],"names":["Component","fetch","Layout","Stores","withApollo","useQuery","gql","ALL_STORES_QUERY","allStoresQueryVars","name","Index","stores","props","variables","notifyOnNetworkStatusChange","loading","error","data","fetchMore","networkStatus","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,IAAMC,gBAAgB,GAAGD,GAAH,mBAAtB;AAMA,OAAO,IAAME,kBAAkB,GAAG;AAC9BC,EAAAA,IAAI,EAAE;AADwB,CAA3B;;IAIDC,K;;;;;;;;;;;;;6BAmBO;AAAA,UACEC,MADF,GACY,KAAKC,KADjB,CACED,MADF;AAEL,aACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,CADJ;AAQH;;;;;;;;;;0BA1B8DN,QAAQ,CAC/DE,gBAD+D,EAE/D;AACEM,gBAAAA,SAAS,EAAEL,kBADb;AAEE;AACA;AACA;AACAM,gBAAAA,2BAA2B,EAAE;AAL/B,eAF+D,C,EAA3DC,O,aAAAA,O,EAASC,K,aAAAA,K,EAAOC,I,aAAAA,I,EAAMC,S,aAAAA,S,EAAWC,a,aAAAA,a;AAWzCC,cAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;+CAEO;AAACA,gBAAAA,IAAI,EAAJA;AAAD,e;;;;;;;;;;;;EAhBKjB,S;;AAgCpB,eAAeI,UAAU,CAACM,KAAD,CAAzB","sourcesContent":["import { Component } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport Layout from '../components/Layout';\nimport Stores from '../components/Stores/Stores';\nimport { withApollo } from '../lib/apollo';\nimport { useQuery } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\n\nconst ALL_STORES_QUERY = gql`\n  query getStoreByName($name: String!){\n    store\n  }\n`\n\nexport const allStoresQueryVars = {\n    name: 'tesco1'\n}\n\nclass Index extends Component {\n    \n    static async getInitialProps() {\n        const { loading, error, data, fetchMore, networkStatus } = useQuery(\n            ALL_STORES_QUERY,\n            {\n              variables: allStoresQueryVars,\n              // Setting this value to true will make the component rerender when\n              // the \"networkStatus\" changes, so we are able to know if it is fetching\n              // more data\n              notifyOnNetworkStatusChange: true,\n            }\n        )        \n\n        console.log(data);\n      \n        return {data};\n    }\n\n    render() {\n        const {stores} = this.props;\n        return (\n            <Layout>\n                <h1>Stores</h1>\n                {/* {stores.map(s=> <Stores key={s.id} {...s} />)}\n                 */}\n            </Layout>\n        )\n            \n    }\n}\n\nexport default withApollo(Index)"]},"metadata":{},"sourceType":"module"}